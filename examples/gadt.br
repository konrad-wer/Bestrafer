
//definition of typical algebraic data type Maybe

data Maybe 'A where
  | Nothing :: Maybe 'A
  | Just :: 'A -> Maybe 'A

//definition of Vector data type (similar to builtin Vec data type)
//that utilizes types of kind N (natural numbers) to annot Vector's length

data Vector N 'A where
  | Nil :: Vector 0 'A
  | Cons :: ∀ n : N . 'A -> Vector n 'A -> Vector (S n) 'A

//now we can define head function, that only accepts non-empty Vectors

def vectorHead :: ∀ n : N, a : * . Vector (S n) a -> a
def vectorHead (Cons x xs) = x

//using empty types as annotations to Either type

data Ok
data Fail

data Either * 'A 'B where
  | Left :: 'A -> Either Fail 'A 'B
  | Right :: 'B -> Either Ok 'A 'B

//this pattern matching is exhaustive because Right
//is only constructor that produces Either Ok 'A 'B type

def getRight :: ∀ a : *, b : *. Either Ok a b -> b
def getRight (Right x) = x
