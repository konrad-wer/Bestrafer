
def main :: ()
def main =
  rec :: ∀ n : N . Vec n Int -> () :
    printRow row =
      case row of
       | [] -> putStrLn ""
       | x : xs -> (putStr . intToString) x `seq` putChar ' ' `seq` printRow xs
  in let res =
    [[1,  2,  3 ],
     [42, 42, 42],
     [44, 44, 44]]
     `mult`
    [[1, 2],
     [2, 3],
     [3, 4]]
  in iter printRow res

//Matrix Algebra////////////////////////////////////////////////////////////////

def mult :: ∀ n : N, m : N, k : N.
  Vec (S n) (Vec (S m) Int) ->
  Vec (S m) (Vec (S k) Int) ->
  Vec (S n) (Vec (S k) Int)
def mult a b = map ((flip multVec) b) a

def multVec :: ∀ n : N, m : N .
  Vec (S n) Int ->
  Vec (S n) (Vec (S m) Int) ->
  Vec (S m) Int
def multVec v m = map (foldl1 (λ x y -> x + y)) (map (zipWith (λ x y -> x * y) v) (transpose m))

def transpose :: ∀ n : N, m : N .
  Vec (S n) (Vec (S m) Int) ->
  Vec (S m) (Vec (S n) Int)
def transpose matrix =
  let indices = mapi const (head matrix) in
  map (flip column matrix) indices

def column :: ∀ n : N, m : N . Int ->
  Vec (S n) (Vec (S m) Int) ->
  Vec (S n) Int
def column i = map (nth i)

def nth :: ∀ n : N, a : * . Int -> Vec (S n) a -> a
def nth 0 (x : xs) = x
def nth _ [x] = x
def nth n (x1 : x2 : xs) = nth (n - 1) (x2 : xs)
