
data Format * where
  | Str :: ∀ a : * . Format a -> Format (String -> a)
  | Inr :: ∀ a : * . Format a -> Format (Int -> a)
  | Flt :: ∀ a : * . Format a -> Format (Float -> a)
  | Bl  :: ∀ a : * . Format a -> Format (Bool -> a)
  | Chr :: ∀ a : * . Format a -> Format (Char -> a)
  | Lit :: ∀ a : * . String -> Format a -> Format a
  | Eol :: ∀ a : * . Format a -> Format a
  | End :: Format ()

def printf ::  ∀ a : * . Format a -> a
def printf End = ()
def printf (Lit s format) = putStr s `seq` printf format
def printf (Eol format) = putStrLn "" `seq` printf format
def printf (Str format) = λ x -> putStr x `seq` printf format
def printf (Inr format) = λ x -> (putStr . intToString) x `seq` printf format
def printf (Flt format) = λ x -> (putStr . floatToString) x `seq` printf format
def printf (Bl  format) = λ x -> (putStr . boolToString) x `seq` printf format
def printf (Chr format) = λ x -> putChar x `seq` printf format

def main :: ()
def main =
  putStrLn "What is your name ?" `seq`
  let name = getLine () in
  printf (Lit "Hello " . Str . Lit "!\nWhat do you get if you multiply six by nine? " . Inr . Eol <| End) name 42
